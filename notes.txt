@Valid/@Validated:

@Validated annotates a class (and sometimes a method if different methods have different constraints) and indicates
that certain parameters of this class need to be validated. Wheneverwe want to validate simple values such as
Requestparameters or Variables inside a class, this class needs to be annotated with @Valdiated.

@Valid annotates complex types such as request bodies or objects... this checks if the Datatype fullfills all the
prerequisits.

Both annotations are useless without more annotations inside the class such as @Min @Max @Size, which determine what is
valid and what is not
_______________________________________________________________________________________________________________________
@Request Parameter:
Typical url for an imaginary method with 2 request parameters (name and email) would look like:
localhost:8080/tableXY/changeEmailAndName?name=Maria&email=maria@gmail.com
the questionmark marks that now the requestparameters will be added. Everything before is the URL to that function. The
"&" links multiple RPs. They are an alternative to using pathvariables
_______________________________________________________________________________________________________________________
@Statuscode
replaces the returnResponse Entity by returning a Responsestatus. By default 200 is returned (=ok).
Only makes sense to use if logically we need something with more information than only "ok".
_______________________________________________________________________________________________________________________
What is Mocking?
Mocking is a process used in unit testing when the unit being tested has external dependencies. The purpose of mocking
is to isolate and focus on the code being tested and not on the behavior or state of external dependencies. In mocking,
the dependencies are replaced by closely controlled replacements objects that simulate the behavior of the real ones.
AFAIK: The whole point of mocking is to save time and resources by only checking if already tested functions etc are
invoked instead of actually executing them.
_______________________________________________________________________________________________________________________
@Autowired
When used on Constructors: Autowires the Constructor when a Bean is created (we dont need to call the Constructor ourselves)
When using on (private) properties: Makes setter methods unnecessary: Spring will automatically assign the calue if
we write propertyXY = 5
Can also be used on setter methods but i dont understand what it does there.
_______________________________________________________________________________________________________________________